/**
 * 
 */
package com.android.ide.eclipse.apt.internal.analysis;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LineNumberNode;
import org.objectweb.asm.tree.MethodNode;

/**
 * The base class for all the analyzers</br>
 * It implements the method that are common to all the analyzers.
 * @author Mattia Gustarini
 *
 */
abstract class SpecificAnalyzer {
	/**
	 * Inner class representing the problem encountered by
	 * a specific analyzer
	 */
	protected class Problem {
		int mLine;
		
		public Problem(final AbstractInsnNode insnNode) {
			mLine = findLine(insnNode);
		}
		
		protected int findLine(final AbstractInsnNode insnNode) {
			int line = 0;
			if (insnNode.getType() != AbstractInsnNode.LINE) {
				AbstractInsnNode lineNode = insnNode.getPrevious();
				while (lineNode.getType() != AbstractInsnNode.LINE) {
					lineNode = lineNode.getPrevious();
				}
				line = ((LineNumberNode)lineNode).line;
			}
			else {
				line = ((LineNumberNode)insnNode).line;
			}
			return line;
		}
		
		public void setMarker(final IResource resource) {
			try {
				final IMarker marker = resource.createMarker(IMarker.PROBLEM);
				if (marker.exists()) {
					marker.setAttribute(IMarker.MESSAGE, mName + ": " + mProblemDescription);
					marker.setAttribute(IMarker.LINE_NUMBER, mLine);
					marker.setAttribute(IMarker.TRANSIENT, true);
					marker.setAttribute(IMarker.PRIORITY, IMarker.PRIORITY_HIGH);
					marker.setAttribute(IMarker.SEVERITY, IMarker.SEVERITY_INFO);
				}
			} catch (final CoreException e) {
				  setMarker(resource);
				  //retry...
			}
		}
		
		@Override
		public boolean equals(Object obj) {
			return obj instanceof Problem && ((Problem)obj).mLine == mLine;
		}
	}
	
	private Collection<Problem> mProblems;
	private final String mName;
	private final String mProblemDescription;
	
	public SpecificAnalyzer(String name, String problemDesc) {
		mName = name;
		mProblemDescription = problemDesc;
		mProblems = new LinkedList<Problem>();
	}
	
	/**
	 * Starts the analysis of the specific analyzer
	 */
	public void analyse(final ClassNode classNode) {
		mProblems = new LinkedList<Problem>();
		final Collection<Problem> foundProblems = analyzeClass(classNode);
		mProblems.addAll(foundProblems);
	}
	
	/**
	 * Get the encountered problems of this specific analyzer
	 * @return
	 */
	public Collection<Problem> getProblems() {
		return mProblems;
	}
	
	/**
	 * Analyze a class</br>
	 * the method can be reimplemented by a specific analyzer if it wants to perform
	 * other analysis rather then the analysis of each method present in it 
	 * @param classNode - the class to be analyzed by the specific analyzer
	 * @return a collection of problems related to the specific analyzer
	 */
	protected Collection<Problem> analyzeClass(final ClassNode classNode) {
		final Collection<Problem> problems = new LinkedList<Problem>();
		final List<MethodNode> methodNodes = (List<MethodNode>)classNode.methods;
		for (final MethodNode methodNode : methodNodes) {
			final Collection<Problem> foundProblems = analyzeMethod(methodNode);
			problems.addAll(foundProblems);
		}
		return problems;
	}
	
	/**
	 * Analyze a method</br>
	 * Abstract method that must be implemented by the specific analyzer in order to
	 * perform its specific performance check
	 * @param methodNode - the method to be analyzed by the specific analyzer
	 * (must be from the current analyzed classNode passed to the method analyzeClass)
	 * @return a collection of problems related to the specific analyzer
	 */
	protected abstract Collection<Problem> analyzeMethod(final MethodNode methodNode);
}
